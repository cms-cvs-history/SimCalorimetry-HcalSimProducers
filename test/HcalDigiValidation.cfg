process PROD  = {

  source = PoolSource {
     untracked vstring fileNames = {'file:pi100.root'}
     untracked int32 maxEvents = -1
     untracked uint32 debugVebosity = 10
     untracked bool   debugFlag     = true
  }

        module mix = MixingModule {
               secsource input = PoolRASource  {
                               untracked vstring fileNames = {"file:pi100.root"}
                               string type = "none"
                               double averageNumber = 0
                               int32 minBunch = xxx
                               int32 maxBunch = xxx
                               int32 seed = 1234567

               }
               int32 bunchspace = 25
        }



include "CalibCalorimetry/HcalPlugins/data/hardwired_conditions.cfi"
include "SimCalorimetry/HcalSimProducers/data/hcaldigi.cfi"

module hcalDumper = HcalDigiDump {}

       module recohbhe = HcalSimpleReconstructor {
	       int32 firstSample = 4
	       int32 samplesToAdd = 4
	       string Subdetector = 'HBHE'
               bool correctForTimeslew = true
               string digiLabel = 'hcaldigi'
	}

	module recoho = HcalSimpleReconstructor {
	       int32 firstSample = 4
	       int32 samplesToAdd = 4
	       string Subdetector = 'HO'
               bool correctForTimeslew = true
               string digiLabel = 'hcaldigi'
	}

	module recohf = HcalSimpleReconstructor {
	       int32 firstSample = 3
	       int32 samplesToAdd = 1
	       string Subdetector = 'HF'
               bool correctForTimeslew = true
               string digiLabel = 'hcaldigi'
	}

        module dumper = HcalRecHitDump { }

  # producer of rechits starting from digis
  module uncalibHitMaker = EcalAnalFitUncalibRecHitProducer {
   string digiProducer   = "ecalSim"
   string digiCollection = ""
   string hitCollection  = "EcalEBUncalibRecHits"
   untracked int32 nMaxPrintout = 20
  }

        # Parameters for making CaloTowers.
	# The thresholds with the comment Scheme B are for noise reduction 
	# and come from scheme B in CMS AN 2005/039 and Physics TDR Volume 1.
	module towermaker = CaloTowersCreator {
           double HBThreshold = 0.9     // GeV, Scheme B
           double HOThreshold = 1.1     // GeV, Scheme B
           double HESThreshold = 1.4    // GeV, Scheme B
           double HEDThreshold = 1.4    // GeV, Scheme B
           double HF1Threshold = 0.5    // GeV, ORCA value
           double HF2Threshold = 0.5    // GeV, ORCA value

           double EBThreshold = 0.09    // GeV, ORCA value w/o selective readout
           double EEThreshold = 0.45    // GeV, ORCA value w/o selective readout
	   
	   double EBSumThreshold = 0.2  // GeV, Scheme B
	   double EESumThreshold = 0.45 // GeV, Scheme B

           double HcalThreshold = -1000 // GeV, -1000 means cut not used 
	   double EcutTower = -1000     // GeV, -1000 means cut not used

	   double EBWeight = 1.0
	   double EEWeight = 1.0
	   double HBWeight = 1.0
	   double HESWeight = 1.0
	   double HEDWeight = 1.0
	   double HOWeight = 1.0
	   double HF1Weight = 1.0
	   double HF2Weight = 1.0
	   bool UseHO = true
        }

	module dumperct = CaloTowersDump  { }
        es_source = XMLIdealGeometryESSource {
               FileInPath GeometryConfiguration = 'Geometry/CMSCommonData/data/configuration.xml'
               string rootNodeName = 'cms:OCMS'
        }

          module hcalTrigPrim = HcalTrigPrimRecHitProducer {}
        es_module = HcalHardcodeGeometryEP {}
        es_module = CaloTowerHardcodeGeometryEP {}
	es_module = CaloGeometryBuilder {}
	es_module = EcalBarrelGeometryEP {}
        es_module = EcalEndcapGeometryEP {}

        block common_jet_parameters = {
                untracked int32 debugLevel = 2
                double seedThreshold = 3.0
                double towerThreshold = 1.0
                double coneAreaFraction = 1.0
                int32 maxPairSize = 2
                int32 maxIterations = 100
                double overlapThreshold = .75
        }

        module mcone5 =  MidpointJetProducer {
                using common_jet_parameters
                double coneRadius = 0.5
        }

        module hitAnalyzer = HcalHitAnalyzer {}
        module digiAnalyzer = HcalDigiAnalyzer {}


#	path p = { mix, hcalDigitizer, hcalTrigPrim, ecalSim, recoho, recohbhe, recohf, towermaker, dumper, dumperct}
#       path p = { mix, hcalSim, hcalTrigPrim, ecalSim, recoho, recohbhe, recohf, uncalibHitMaker, towermaker, dumper, dumperct, mcone5, hitAnalyzer}
      path p = { mix, hcaldigi, hcalTrigPrim,  recoho, recohbhe, recohf, hitAnalyzer, digiAnalyzer}
}
